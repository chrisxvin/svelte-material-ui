import{E as e,at as t,au as n,av as s}from"./vendor-3cdf5abd.js";function o(e){return Object.entries(e).filter((([e,t])=>""!==e&&t)).map((([e])=>e)).join(" ")}function a(e,t,n,s={bubbles:!0}){if("undefined"!=typeof Event&&e){const o=new CustomEvent(t,Object.assign(Object.assign({},s),{detail:n}));return null==e||e.dispatchEvent(o),o}}const r=/^[a-z]+(?::(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/,i=/^[^$]+(?:\$(?:preventDefault|stopPropagation|passive|nonpassive|capture|once|self))+$/;function l(o){let a,l=[];function c(e){t(o,e)}return o.$on=(e,t)=>{let n=e,s=()=>{};a?s=a(n,t):l.push([n,t]);return n.match(r)&&console&&console.warn('Event modifiers in SMUI now use "$" instead of ":", so that all events can be bound with modifiers. Please update your event binding: ',n),(...e)=>{s()}},t=>{const o=[],p={};a=(a,l)=>{let u=a,f=l,h=!1;const d=u.match(r),v=u.match(i),g=d||v;if(u.match(/^SMUI:\w+:/)){const e=u.split(":");let t="";for(let n=0;n<e.length;n++)t+=n===e.length-1?":"+e[n]:e[n].split("-").map((e=>e.slice(0,1).toUpperCase()+e.slice(1))).join("");console.warn(`The event ${u.split("$")[0]} has been renamed to ${t.split("$")[0]}.`),u=t}if(g){const e=u.split(d?":":"$");u=e[0];const t=Object.fromEntries(e.slice(1).map((e=>[e,!0])));t.passive&&(h=h||{},h.passive=!0),t.nonpassive&&(h=h||{},h.passive=!1),t.capture&&(h=h||{},h.capture=!0),t.once&&(h=h||{},h.once=!0),t.preventDefault&&(f=n(f)),t.stopPropagation&&(f=s(f))}const m=e(t,u,f,h),b=()=>{m();const e=o.indexOf(b);e>-1&&o.splice(e,1)};return o.push(b),u in p||(p[u]=e(t,u,c)),b};for(let e=0;e<l.length;e++)a(l[e][0],l[e][1]);return{destroy:()=>{for(let e=0;e<o.length;e++)o[e]();for(let e of Object.entries(p))e[1]()}}}}function c(e,t){let n=[];if(t)for(let s=0;s<t.length;s++){const o=t[s],a=Array.isArray(o)?o[0]:o;Array.isArray(o)&&o.length>1?n.push(a(e,o[1])):n.push(a(e))}return{update(e){if((e&&e.length||0)!=n.length)throw new Error("You must not change the length of an actions array.");if(e)for(let t=0;t<e.length;t++){const s=n[t];if(s&&s.update){const n=e[t];Array.isArray(n)&&n.length>1?s.update(n[1]):s.update()}}},destroy(){for(let e=0;e<n.length;e++){const t=n[e];t&&t.destroy&&t.destroy()}}}}export{o as c,a as d,l as f,c as u};
